<ns0:RootFileSystem xmlns:ns0="https://www.linutronix.de/projects/Elbe" xmlns:xi="http://www.w3.org/2003/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" created="2009-05-20T08:50:56" revision="6" xsi:schemaLocation="https://www.linutronix.de/projects/Elbe dbsfed.xsd">
	<project>
		<name>ebcl_basic_image</name>
		<version>1.0</version>
		<description>
			You can run the image in QEMU aarch64 using the following command:
			qemu-system-aarch64 \
				-machine virt -cpu cortex-a72 -machine type=virt -nographic -m 4G \
				-netdev user,id=mynet0 \
				-device virtio-net-pci,netdev=mynet0 \
				-kernel vmlinuz \
				-append "root=LABEL=root rw console=ttyAMA0,115200n8 systemd.machine_id=004711" \
				-initrd initrd.img \
				-drive format=raw,file=sdcard.img,if=virtio
		</description>
		<buildtype>aarch64</buildtype>
		<xi:include href="../../includes/ebcl_1.1.1_mirrors.xml" />
		<suite>jammy</suite>
	</project>
	<target>
		<hostname>ebcl_ref_img_standard</hostname>
		<domain>elektrobit.com</domain>
		<passwd>linux</passwd>
		<console>ttyAMA0,115200</console>
		<debootstrap>
			<variant>minbase</variant>
		</debootstrap>
		<images>
			<msdoshd>
				<name>sdcard.img</name>
				<size>2GiB</size>
					<partition>
						<size>remain</size>
						<label>root</label>
					</partition>
			</msdoshd>
		</images>
		<fstab>
			<bylabel>
				<label>root</label>
				<mountpoint>/</mountpoint>
				<fs>
					<type>ext4</type>
				</fs>
			</bylabel>
		</fstab>
		<pkg-list>
			<!-- default kernel image form Canonical -->
			<pkg>linux-image-generic</pkg>
			<!-- required to allow the kernel package to generate an initrd.img -->
			<pkg>initramfs-tools</pkg>
			<!-- crinit init manager -->
			<pkg>crinit</pkg>
			<pkg>crinit-shutdown</pkg>
			<pkg>crinit-machine-id-gen</pkg>
			<!-- netifd as network manager -->
			<pkg>netifd</pkg>
			<!-- busybox for getty and shell -->
			<pkg>busybox-static</pkg>
			<!-- required for file system check and recovery -->
			<!-- e2fsprogs requires libblkid1 and libuuid1, and both contain GPL-3 code -->
			<!-- <pkg>e2fsprogs</pkg> -->
		</pkg-list>
		<finetuning>
			<!-- use busybox for tools -->
			<command>busybox --install</command>
			<!-- use busybox shell for root -->
			<command>chsh -s /bin/ash root</command>
			<!-- delete getty task for x86_64 -->
			<rm>/etc/crinit/crinit.d/getty-ttyS0.crinit</rm>
			<!-- link crinit as init manager -->
			<ln path="/usr/bin/crinit">/usr/sbin/init</ln>
			<!-- link resolv.conf from netifd -->
			<ln path="/var/run/resolv.conf.netifd">/etc/resolv.conf</ln>
			<!-- optimize image for production -->
			<!-- remove not needed kernel modules -->
			<!-- remove not needed packages -->
			<command>/optimize/optimize.sh</command>
			<!-- delete commands not compatible with crinit -->
			<rm>/sbin/telinit</rm>
			<rm>/sbin/shutdown</rm>
			<rm>/sbin/halt</rm>
			<rm>/sbin/runlevel</rm>
			<!-- create tmp mount point -->
			<command>mkdir -p /tmp</command>
			<!-- create /var/run folder, required by ubus -->
			<ln path="/run">/var/run</ln>
		</finetuning>
		<project-finetuning>
			<losetup img="sdcard.img">
				<!-- extract kernel and initrd -->
				<copy_from_partition part="1" artifact="vmlinuz">/boot/vmlinuz-*</copy_from_partition>
				<copy_from_partition part="1" artifact="initrd.img">/boot/initrd.img-*</copy_from_partition>
				<!-- delete boot folder -->
				<command part="1">rm -rf ${ELBE_MNT}/boot</command>
				<!-- extract and delete package data -->
				<command part="1">tar -cvf ${ELBE_MNT}/package_data.tar -C ${ELBE_MNT} var/lib/dpkg usr/share/doc</command>
				<copy_from_partition part="1" artifact="package_data.tar">/package_data.tar</copy_from_partition>
				<command part="1">rm -f ${ELBE_MNT}/package_data.tar</command>
				<!-- optimize image for production -->
				<!-- remove not needed data, e.g. manpages -->
				<command part="1">${ELBE_MNT}/optimize/post_build_optimize.sh ${ELBE_MNT}</command>
			</losetup>
			<set_packer packer="none">sdcard.img</set_packer>
		</project-finetuning>
	</target>
	<archivedir>../../overlays/crinit</archivedir>
	<!-- add optimization scripts  -->
	<archivedir>../../overlays/optimize</archivedir>
</ns0:RootFileSystem>
