#!/bin/sh

find_device_by_label() {
    LABEL_TO_FIND=$1
    LABEL_NAME=$(echo "$LABEL_TO_FIND" | cut -d '=' -f 2 )

    while read -r major minor blocks name; do

        if [ "$name" != "name" ]; then

            DEVICE="/dev/$name"

            if [ -b "$DEVICE" ]; then
                DEVICE_LABEL=$(e2label "$DEVICE" 2>/dev/null)

                if [ "$DEVICE_LABEL" = "$LABEL_NAME" ]; then
                    echo "$DEVICE"
                    return 0
                fi
            fi
        fi
    done < /proc/partitions
    echo "not_found_by_label"
    return 1
}

mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

cmdline=$(cat /proc/cmdline)
echo "Kernel commandline: ${cmdline}"

# Load kernel modules
{% for mod in mods %}
modprobe {{ mod }}
{% endfor %}

{% if root %}
root={{ root }}
{% endif %}

test_overlay=""
read_only=1
init=/sbin/init

for param in $cmdline; do
    case $param in
        root=*)
            root=$(echo $param | cut -d'=' -f2-)
            echo "Using root ${root} from kernel cmdline."
            ;;
        test_overlay=*)
            test_overlay=$(echo $param | cut -d'=' -f2-)
            echo "Using test_overlay ${test_overlay} from kernel cmdline."
            ;;
        rw)
            read_only=0
            echo "Using rw root."
            ;;
        init=*)
            init=$(echo $param | cut -d'=' -f2-)
            echo "Using init from kernel cmdline: ${init}"
            ;;
    esac
done

stat $root
if [ $? -ne 0 ]; then
    # List devices
    echo "Available devices:"
    ls -lah /dev/vd*
    ls -lah /dev/sd*
    ls -lah /dev/mmc*

    echo "Root device not found! Dropping to shell."
    echo "You can continue booting by exiting this shell."
    /bin/sh
fi

sysroot="/sysroot"

if [ $read_only -ne 1 ]; then
    echo "Using root $root writable."
    mount $root $sysroot
else
    echo "Using device $root as read-only root."
    mount -o ro $root $sysroot
fi

# Mount test overlay
if [ -n "$test_overlay" ]; then
    echo "Mounting test overlay ${test_overlay}."
    stat $test_overlay
    if [ $? -eq 0 ]; then
        echo "Mount test overlay from device ${test_overlay}"
        mkdir -p /test_overlay
        mount $test_overlay /test_overlay

        # Ensure overlayFS is available
        modprobe overlay

        if [ $read_only -ne 1 ]; then
            echo "Mounting rw overlay."
            echo "Create tmpfs for rw overlay."
            mount -t tmpfs -o size=100% none ${sysroot}/tmp
            echo "Create rw overlay dirs."
            mkdir -p ${sysroot}/tmp/overlay/work
            mkdir -p ${sysroot}/tmp/overlay/upper
            echo "Do overlay mount."
            mount -t overlay overlay -olowerdir=${sysroot}:/test_overlay,upperdir=${sysroot}/tmp/overlay/upper,workdir=${sysroot}/tmp/overlay/work ${sysroot}
        else
            echo "Mounting ro overlay."
            mount -t overlay overlay -olowerdir=${sysroot}:/test_overlay ${sysroot}
        fi
    else
        echo "Test overlay device not found!"
    fi
fi

# Check if init exists
init_ok=0
if [ -L "${sysroot}${init}" ]; then
    echo "${init} is a symlink."
    ls -lah "${sysroot}${init}"
    init_ok=1
elif [ -f "${sysroot}${init}" ]; then
    echo "${init} is a file..."
    if [ ! -x "${sysroot}${init}" ]; then
        echo "${init} is not executable!"
    else
        init_ok=1
    fi
fi

# Switch to the new root filesystem
if [ $init_ok -ne 1 ]; then
    echo "There seems to be an issue with ${init}! Dropping to shell."
    echo "You can continue booting by exiting this shell."
    /bin/sh
fi

mount --move /proc ${sysroot}/proc
mount --move /sys ${sysroot}/sys
mount --move /dev ${sysroot}/dev

exec switch_root ${sysroot} /sbin/init
