#!/bin/sh

set -eu
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname -- "${SCRIPT_PATH}")
REPO_DIR=$(readlink -f "${SCRIPT_DIR}/..")

SDK_VERSION="0.2.0"
BINARY_FILE_ARGUMENT_SHORT="-bf"
BINARY_FILE_ARGUMENT="--binary-file"
BINARY_FILE_INFO="full path of binary file of application"
BINARY_FILE_SELECTION=""

usage()
{
    printf "This script is used to collect reports for an application."
    printf ""
    printf "\e[7mUsage :\e[0m"
    printf ""
    printf "collect_report.sh %s|%s <%s>" "${BINARY_FILE_ARGUMENT_SHORT}" "${BINARY_FILE_ARGUMENT}" "${BINARY_FILE_INFO}"
    printf ""
    printf "<%s>  | <%s>               : <%s> (Required)" "${BINARY_FILE_ARGUMENT_SHORT}" "${BINARY_FILE_ARGUMENT}" "${BINARY_FILE_INFO}"
    printf "%s" "-h   | --help                      : Display this usage message"
}


PARAMETER_LIST=$*
if [ $# -lt 1 ] ; then
    printf "\e[91m[ERROR]\e[0m Missing required argument!"
    usage
    exit 1
fi

while [ $# -gt 0 ] ; do
    case $1 in
    "${BINARY_FILE_ARGUMENT}" | "${BINARY_FILE_ARGUMENT_SHORT}")
        if [ $# -lt 2 ] ; then
            printf "\e[91m[ERROR]\e[0m Missing required argument!"
            usage
            exit 1
        fi
        BINARY_FILE_SELECTION="${2}"
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        printf "\e[91m[ERROR]\e[0m Unknown argument '%s' not found !" "$1"
        usage
        exit 1
    esac
    shift
done

if [ -z "${BINARY_FILE_SELECTION}" ] ; then
    printf "\e[91m[ERROR]\e[0m Missing required argument!"
    usage
    exit 1
fi
if [ ! -f "${BINARY_FILE_SELECTION}" ] ; then
    printf "\e[91m[ERROR]\e[0m File %s does not exist!" "${BINARY_FILE_SELECTION}"
    exit 1
fi

APP_PATH=$(readlink -f "${BINARY_FILE_SELECTION}")
APP_FILE=$(basename -- "${APP_PATH}")

REPORT_DIR="${REPO_DIR}/report"
rm -rf "$REPORT_DIR"
mkdir -p "$REPORT_DIR"
REPORT_FILE="${REPORT_DIR}/${APP_FILE}"
rm -rf "$REPORT_FILE"
touch "$REPORT_FILE"

printf "Partner self-certification service:\n\n" >> "$REPORT_FILE"

# Version
AMI_VERSION="self_certification_EBcL_SDK-${SDK_VERSION}"
{
    printf "Used AMI version:\n";
    printf "%s\n\n" "${AMI_VERSION}";
    
    # Call
    printf "Report generated by %s %s\n\n\n" "$0" "$PARAMETER_LIST";
    
    # Application
    printf "Application %s:\n\n" "${APP_FILE}";
    
    # Build info
    printf "Build information of %s:\n\n" "${BINARY_FILE_SELECTION}";
    printf "file %s:\n" "${BINARY_FILE_SELECTION}";
    file "${BINARY_FILE_SELECTION}";
    printf "\nldd %s:\n" "${BINARY_FILE_SELECTION}";
    ldd "${BINARY_FILE_SELECTION}";
    printf "\n\n";
    
    # Installed packages
    printf "Installed packages:\n\n";
    printf "dpkg -l:\n";
    dpkg -l;
    printf "\n\n";
} >> "$REPORT_FILE"

# Application status
# crinit config file
CRINIT_FILE_SELECTION=""
if [ -d "/etc/crinit" ] && [ -n "$(find /etc/crinit/ -name "*.crinit")" ] ; then
    set -- $(find /etc/crinit/ -name "*.crinit"|grep "\.crinit"| awk '{print $1}')
    while [ $# -gt 0 ] ; do
        CRINIT_CFG_FILE=$1
        if [ -n "$(grep "${BINARY_FILE_SELECTION}" "${CRINIT_CFG_FILE}")" ] ; then
            CRINIT_FILE_SELECTION="${CRINIT_CFG_FILE}"
            APP_CRINIT=$(grep "NAME =" "${CRINIT_FILE_SELECTION}" | awk '{print $3}')
        fi
        shift
    done
    {
        printf "crinit information:\n\n";
        printf "crinit-ctl list:\n";
        crinit-ctl list;
        printf "\n\n";
    } >> "$REPORT_FILE"
    if [ -n "${CRINIT_FILE_SELECTION}" ] && [ -f "${CRINIT_FILE_SELECTION}" ] ; then
        {
            printf "Status of application %s:\n\n" "${APP_FILE}";
            printf "crinit-ctl status %s:\n" "${APP_CRINIT}";
            crinit-ctl status "${APP_CRINIT}";

            printf "\ncrinit service file:\n";
            printf "ls -laF %s\n" "${CRINIT_FILE_SELECTION}";
            ls -laF "${CRINIT_FILE_SELECTION}";
        } >> "$REPORT_FILE"
        cp "${CRINIT_FILE_SELECTION}" "${REPORT_DIR}"/
    else
        printf "crinit service file not available for %s!\n" "${BINARY_FILE_SELECTION}" >> "$REPORT_FILE"
    fi
else
    printf "No crinit information available!\n" >> "$REPORT_FILE"
fi
printf "\n\n" >> "$REPORT_FILE"

# Application status
# systemd service file
SYSTEMD_FILE_SELECTION=""
if [ -d "/lib/systemd" ] && [ -n "$(find /lib/systemd/ -name "*.service")" ] ; then
    set -- $(find /lib/systemd/ -name "*.service"|grep "\.service"| awk '{print $1}')
    while [ $# -gt 0 ] ; do
        SYSTEMD_CFG_FILE=$1
        if [ -n "$(grep "${BINARY_FILE_SELECTION}" "${SYSTEMD_CFG_FILE}")" ] ; then
            SYSTEMD_FILE_SELECTION="${SYSTEMD_CFG_FILE}"
            APP_SYSTEMD_PATH=$(readlink -f "${SYSTEMD_FILE_SELECTION}")
            APP_SYSTEMD=$(basename -- "${APP_SYSTEMD_PATH}")
        fi
        shift
    done
    {
        printf "systemd information:\n\n";
        printf "systemctl status:\n";
        systemctl status;
        printf "\n\n";
    } >> "$REPORT_FILE"
    if [ -n "${SYSTEMD_FILE_SELECTION}" ] && [ -f "${SYSTEMD_FILE_SELECTION}" ] ; then
        {
            printf "Status of application %s:\n\n" "${APP_FILE}";
            printf "systemctl status %s:\n" "${APP_SYSTEMD}";
            systemctl status "${APP_SYSTEMD}";

            printf "\nsystemd service file:\n";
            printf "ls -laF %s\n" "${SYSTEMD_FILE_SELECTION}";
            ls -laF "${SYSTEMD_FILE_SELECTION}";
        } >> "$REPORT_FILE"
        cp "${SYSTEMD_FILE_SELECTION}" "${REPORT_DIR}"/
    else
        printf "systemd service file not available for %s!\n" "${BINARY_FILE_SELECTION}" >> "$REPORT_FILE"
    fi
else
    printf "No systemd information available!\n" >> "$REPORT_FILE"
fi
printf "\n\n" >> "$REPORT_FILE"

# system call info
if [ -n "$(find /tmp/ -name "${APP_FILE}*")" ] ; then
    mkdir -p "${REPORT_DIR}"/straces
    {
        printf "System call information:\n\n";
        printf "ls -laF /tmp/%s*:\n" "${APP_FILE}";
        ls -laF /tmp/"${APP_FILE}"*;
    } >> "$REPORT_FILE"
    cp /tmp/"${APP_FILE}"* "${REPORT_DIR}"/straces/
else
    printf "No system call information available!\n" >> "$REPORT_FILE"
fi
printf "\n\n" >> "$REPORT_FILE"

# Crash info
CRASH_INFO=""
if [ -n "$(find /tmp/ -name "core.*")" ] ; then
    # Crash Info for crinit
    CRASH_INFO="crinit crash"
    mkdir -p "${REPORT_DIR}"/coredumps
    printf "Crash information:\n\n" >> "$REPORT_FILE"
    if [ -n "$(find /var/log/ -name "coredumps_*")" ] ; then
        {
            printf "ls -laF /var/log/coredumps_*:\n";
            ls -laF /var/log/coredumps_*;
        } >> "$REPORT_FILE"
        cp /var/log/coredumps_* "${REPORT_DIR}"/coredumps/
    fi
    if [ -n "$(find /var/log/ -name "elosd_*")" ] ; then
        {
            printf "\nls -laF /var/log/elosd_*:\n";
            ls -laF /var/log/elosd_*;
        } >> "$REPORT_FILE"
        cp /var/log/elosd_* "${REPORT_DIR}"/coredumps/
    fi
    {
        printf "\nls -laF /tmp/core.*:\n";
        ls -laF /tmp/core.*;
    } >> "$REPORT_FILE"
    cp /tmp/core.* "${REPORT_DIR}"/coredumps/
fi
if [ -d "/var/lib/systemd/coredump" ] && [ -n "$(find /var/lib/systemd/coredump/ -name "core.*")" ] ; then
    # Crash Info for systemd
    CRASH_INFO="systemd crash"
    mkdir -p "${REPORT_DIR}"/coredumps
    printf "Crash information:\n\n" >> "$REPORT_FILE"
    {
        printf "ls -laF /var/lib/systemd/coredump/core.*:\n";
        ls -laF /var/lib/systemd/coredump/core.*;
    } >> "$REPORT_FILE"
    cp /var/lib/systemd/coredump/core.* "${REPORT_DIR}"/coredumps/
fi

if [ -z "${CRASH_INFO}" ] ; then
    printf "No crash information available!\n" >> "$REPORT_FILE"
fi

cd "${REPO_DIR}"
rm -f "${REPO_DIR}"/"${APP_FILE}"_report.tar*
tar -cf "${REPO_DIR}"/"${APP_FILE}"_report.tar report
gzip "${REPO_DIR}"/"${APP_FILE}"_report.tar

